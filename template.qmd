---
title: "Lab 6: Policy Search"
author: "Jonah Schaechter js336"
jupyter: julia-1.10
date: 2024-03-01
week: 7
categories: [Lab]

format: 
    html: default

    # YOU DO NOT NEED BOTH PDF AND DOCX.
    # COMMENT OR DELETE THE ONE YOU DON'T WANT TO USE.
    pdf:
        documentclass: article
        fontsize: 11pt
        geometry:
            - margin=1in  
        number-sections: true
        code-line-numbers: true
    #docx: 
    #    toc: true
    #    fig-format: png
    #    number-sections: true
    #    code-line-numbers: true

date-format: "ddd., MMM. D"

execute: 
  cache: true
  freeze: auto

bibliography: references.bib
---

```{julia}
using Revise
using HouseElevation

using CSV
using DataFrames
using DataFramesMeta
using Distributions
using LaTeXStrings
using Metaheuristics
using Plots
using Random
using Unitful

Plots.default(; margin=5Plots.mm)
```

```{julia}
function objective_function(a::AbstractFloat)
    return true # PLACEHOLDER
end
```

```{julia}
Random.seed!(2024)

```


```{julia}
#| output: false
slr_scenarios = let
    df = CSV.read("data/slr_oddo.csv", DataFrame)
    [Oddo17SLR(a, b, c, tstar, cstar) for (a, b, c, tstar, cstar) in eachrow(df)]
end

house = let
    haz_fl_dept = CSV.read("data/haz_fl_dept.csv", DataFrame) # read in the file
    desc = "one story, Contents, fresh water, short duration"
    row = @rsubset(haz_fl_dept, :Description == desc)[1, :] # select the row I want
    area = 500u"ft^2"
    height_above_gauge = 10u"ft"
    House(row; area=area, height_above_gauge=height_above_gauge, value_usd=250_000)
end

p = ModelParams(; house=house, years=2024:2083)

function draw_surge_distribution()
    μ = rand(Normal(5, 1))
    σ = rand(Exponential(1.5))
    ξ = rand(Normal(0.1, 0.05))
    return GeneralizedExtremeValue(μ, σ, ξ)
end
function draw_discount_rate()
    return 0.0
end

N_SOW = 100_000
sows = [
    SOW(rand(slr_scenarios), draw_surge_distribution(), draw_discount_rate()) for
    _ in 1:N_SOW
] # for 100,000 SOWs
```

Pick first X number of SOWs 
```{julia}
N_SOW_opt = 10
sows = sows[1:N_SOW_opt]
```

Define objective function: 

Also, gonna cite: https://discourse.julialang.org/t/no-method-matching-length-for-any-dot-syntax-operation-involving-a-struct/88425
as how I figured out broadcasting.  According to this source, Julia often tries to iterate across custom values, even if there's just one of them, which obviously doesn't work, and throws an arror when we try to broadcast a function with "."  .  The broadcastable lines fix this. 
```{julia}
Base.broadcastable(a::Action) = Ref(a)  #Broadcasting, see commentary above
Base.broadcastable(p::ModelParams) = Ref(p)

function Obj_Fun(Elevation)
    a = Action(1u"ft") #convert input scalar to an action
    #println(a)
    Exp_Values = run_sim.(a, sows, p) #run sim on each SOW to get expected values 
    #println(Exp_Values)
    return -sum(Exp_Values) #return negative sum of expected values

end 
```

```{julia}
Obj_Fun(1)
```


```{julia}
a = Action(3.0u"ft")
sow = first(sows)
_ = run_sim(a, sow, p)
@time run_sim(a, sow, p)
```