---
title: "Lab 6: Policy Search"
author: "Jonah Schaechter js336"
jupyter: julia-1.10
date: 2024-03-01
week: 7
categories: [Lab]

format: 
    html: default

    # YOU DO NOT NEED BOTH PDF AND DOCX.
    # COMMENT OR DELETE THE ONE YOU DON'T WANT TO USE.
    pdf:
        documentclass: article
        fontsize: 11pt
        geometry:
            - margin=1in  
        number-sections: true
        code-line-numbers: true
    #docx: 
    #    toc: true
    #    fig-format: png
    #    number-sections: true
    #    code-line-numbers: true

date-format: "ddd., MMM. D"

execute: 
  cache: true
  freeze: auto

bibliography: references.bib
---

```{julia}
using Revise
using HouseElevation

using CSV
using DataFrames
using DataFramesMeta
using Distributions
using LaTeXStrings
using Metaheuristics
using Plots
using Random
using Unitful

Plots.default(; margin=5Plots.mm)
```


```{julia}
Random.seed!(2024)
```


Choosing Galveston Pier 21, Texas
The guage is at 29° 18.6 N, 94° 47.6 W
https://maps.app.goo.gl/GyanSMA2fp9rkVrT9

Our building is 302 17th St, Galveston, TX 77550,
Home area as estimated by google maps: 30ftx50ft home = 1500ft^2
Home value from zillow: 247,700 (Round up to 250,000)

The home is 4.41 feet or 1.34 meters above sea level in elevation.
Looking at it on street view, the house appears to be on concrete blocks about 6 inches tall, giving it an effective height of 4.91 feet.  Round this up to 5 so that it works.

Row 98 from the data is two-story, no basement in Galveston, so we'll be using that for our depth-damage curve.  The home is on concrete blocks, so we can be confident that it doesn't have a basement.


```{julia}
#| output: false
slr_scenarios = let
    df = CSV.read("data/slr_oddo.csv", DataFrame)
    [Oddo17SLR(a, b, c, tstar, cstar) for (a, b, c, tstar, cstar) in eachrow(df)]
end

house = let
    haz_fl_dept = CSV.read("data/haz_fl_dept.csv", DataFrame) # read in the file
    desc = "Two-story, no basement in Galveston"
    row = @rsubset(haz_fl_dept, :Column1 == 98)[1, :,] # select the row I want
    area = 1500u"ft^2"
    height_above_gauge = 5u"ft"  #Previously used 4.91, had to round up to 5 to make it work with functions
    House(row; area=area, height_above_gauge=height_above_gauge, value_usd=250_000)
end
```


```{julia}
p = ModelParams(; house=house, years=2024:2083)

function draw_surge_distribution()
    μ = rand(Normal(5, 1))
    σ = rand(Exponential(1.5))
    ξ = rand(Normal(0.1, 0.05))
    return GeneralizedExtremeValue(μ, σ, ξ)
end
function draw_discount_rate()
    return rand(Normal(0.04, 0.02))  #Was this originally 0 on purpose?
end

N_SOW = 1_000
sows = [
    SOW(rand(slr_scenarios), draw_surge_distribution(), draw_discount_rate()) for
    _ in 1:N_SOW
] # Had to do less SOWs since 100k didn't finish running after 30 minutes on my computer
```

Pick first X number of SOWs 
```{julia}
N_SOW_opt = 100 #bumped it up to 100 since 10 didn't get the same results as the graph
limited_sows = sows[1:N_SOW_opt]
```

Define objective function: 

Gonna cite: https://discourse.julialang.org/t/no-method-matching-length-for-any-dot-syntax-operation-involving-a-struct/88425
as how I figured out broadcasting.  According to this source, Julia often tries to iterate across custom values, even if there's just one of them, which obviously doesn't work, and throws an arror when we try to broadcast a function with "."  .  The broadcastable lines fix this. 

```{julia}
Base.broadcastable(a::Action) = Ref(a)  #Broadcasting, see commentary above
Base.broadcastable(p::ModelParams) = Ref(p)

function Obj_Fun(Elevation)
    a = Action.(Elevation*1u"ft") #convert input scalar to an action
    
    Exp_Values = run_sim.(a, limited_sows, p) #run sim on each SOW to get expected values 
    
    return -sum(Exp_Values) #return negative sum of expected values

end 
```


Test our function with a few elevations:
```{julia}
println(Obj_Fun(0))
println(Obj_Fun(3))
println(Obj_Fun(10))
```

```{julia}
bounds = boxconstraints(; lb=0, ub=14) #bounds from 0 ft to 14 ft
println(bounds)
options = Options(; time_limit=10.0)  #set a time limit
algorithm = ECA(; options=options) #set an algorithm
Random.seed!(336)
```

```{julia}
result = optimize(Obj_Fun, bounds, algorithm)
println("Lowest NPV is ", minimum(result))
println("Which is achieved by elevating to a height of ", minimizer(result)[1], " feet.")
```

Plot our results: 

```{julia}

function All_SOW_Obj_Fun(Elevation)
    a = Action.(Elevation*1u"ft") #convert input scalar to an action
    Exp_Values = run_sim.(a, sows , p) #run sim on each SOW to get expected values 
    return -sum(Exp_Values) #return negative sum of expected values
end 

let
    # Generate points for the plot
    Elevation = range(0; stop=14, length=15)
    NPV = All_SOW_Obj_Fun.(Elevation)

    # Create the plot
    plot(
        Elevation, NPV; xlabel="Elevation", ylabel="Net Present Cost (USD)", title="Net Present Costs vs Elevation for all SOWs"
    )
end
```

## Reflection

Conclude your analysis by reflecting on the following questions

1. How are we framing this problem? What are the decision variables, the objective function, and the states of the world over which we optimize?

Our decision variable is how high we elevate the house, the objective function is NPV, and the states of world are sea level rise, storm surge distribution, and discount rate. 

2. Digging deeper, we are averaging the objective function computed over a finite number of states of the world. This assumes that they are all drawn from a distribution representing the "true" distribution of states of the world. Is this a good assumption?

In this case, although we've done our best, this may not be a good assumtion.  As we saw in previous labs, there are large uncertanties in sea level rise projections.  

There are also fair criticisms of the distribution we used for discount rate.  It was chosen based on the author's biases, which are inclined away from assuming people in the future could be richer, but historical trends disagree with this.  Our distribution for discount rate may not be accurate.  

3. What's not being considered in this analysis that might be important?

How the factors of upfront costs and reliability might have greater importance to homeowners than their representation in NPV.  

Especially in our case, where the NPV curve starts to flatten around 8 feet, it may be worth asking if the marginal cost to elevate from 8 feet to 11 feet is worth it for the marginal benefit.  

Another thing we should consider once we start elevating this high are new costs we start to run into.  In the case of the home being explored here, the front door is only 13 feet away from the street.  If we elevate it 11 feet, and put in stairs up to the front door at a slope of 35 degrees, our staircase will be 15.7 feet long! It would enter the street!   

We could move the home back 3 feet, but this may incur additional costs not considered in our original function.
